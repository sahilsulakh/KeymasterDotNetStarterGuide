using System;
using System.Diagnostics;
using System.Drawing;
using System.Windows.Forms;

namespace YourWorkSpaceName  //Change it to your workspace name
{
    public partial class LoginPage : Form
    {
        // Service for communicating with KeyMaster authentication backend
        private KeyMasterAuthService _authService;

        // Your KeyMaster account's unique identifier (UID)
        private string _myKeyMasterAccountUID = "PASTE_YOUR_KEYMASTER_ACCOUNT_UID_HERE"; //CHANGE IT WITH YOUR ACCOOUNT USER ID FROM KEYMASTER PROFILE SECTION - IMPORTANT!!

        public Form1()
        {
            InitializeComponent();

            // Initialize the authentication service
            _authService = new KeyMasterAuthService();

            // Validate if KeyMaster UID is configured properly
            if (string.IsNullOrWhiteSpace(_myKeyMasterAccountUID) ||
                _myKeyMasterAccountUID == "PASTE_YOUR_KEYMASTER_ACCOUNT_UID_HERE") //DONT TOUCH/PASTE ANYTHING HERE ⚠️⚠️
            {
                MessageBox.Show(
                    "KeyMaster Account UID is not set in the application. Please contact the application provider.",
                    "Configuration Error",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error
                );

                // Optional: Disable login button if UID is not set
                // btnLogin.Enabled = false;
            }
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Reserved for form load logic (if needed)
        }

        // Event handler for the "Activate" button click
        private async void btnActivate_Click(object sender, EventArgs e)
        {
        // Prevent activation if KeyMaster UID is not set
        if (string.IsNullOrWhiteSpace(_myKeyMasterAccountUID) || _myKeyMasterAccountUID == "PASTE_YOUR_KEYMASTER_ACCOUNT_UID_HERE") //DONT TOUCH/PASTE ANYTHING HERE⚠️⚠️
            {
                MessageBox.Show("Application is not configured to connect to KeyMaster. Please contact the application provider.", "Configuration Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            // Disable the button to prevent multiple clicks
            btnActivate.Enabled = false;

            // Optional: Update UI label to show authentication progress
            if (lblStatus != null) lblStatus.Text = "Authenticating...";

            // Prepare the authentication request payload
            var authRequest = new AuthRequest
            {
                MasterUserId = _myKeyMasterAccountUID, // Your account UID
                LicenseKey = txtLicenseKey.Text.Trim().ToUpper(), // User-entered license key
                Hwid = HwidGenerator.GetHardwareId(), // Hardware ID of the user's system
                AppVersion = Application.ProductVersion, // Current application version
                Username = string.IsNullOrWhiteSpace(txtUsername.Text) ? null : txtUsername.Text.Trim(),
                // Password = string.IsNullOrWhiteSpace(txtPassword.Text) ? null : txtPassword.Text // Uncomment if password is used
            };

            // Debugging output (visible in Output window during development)
            Debug.WriteLine($"Attempting KeyMaster Auth with MasterUserId: '{authRequest.MasterUserId}'");
            Debug.WriteLine($"LicenseKey: '{authRequest.LicenseKey}', HWID: '{authRequest.Hwid}', AppVersion: '{authRequest.AppVersion}'");

            // Send the authentication request and await the result
            AuthResponse? authResult = await _authService.AuthenticateAsync(authRequest);

            // Check if authentication was successful
            if (authResult != null && authResult.Success)
            {
                MessageBox.Show(authResult.Message, "Authentication Successful", MessageBoxButtons.OK, MessageBoxIcon.Information);

                // TODO: Unlock your application's main features after successful login
                // Example:
                 // this.Hide();
                 // MainForm mainApp = new MainForm();
                 // mainApp.ShowDialog();
                 // this.Close();
            }
            else
            {
                // If authentication failed, show the error message
                string errorMessage = authResult?.Message ?? "An unknown authentication error occurred.";
                MessageBox.Show(errorMessage, "Authentication Failed", MessageBoxButtons.OK, MessageBoxIcon.Error);

                // Optional: Update status label with error
                // if (lblStatus != null) lblStatus.Text = $"Failed: {errorMessage}";
            }

            // Re-enable the button after completion
            btnActivate.Enabled = true;
        }
    }
}
