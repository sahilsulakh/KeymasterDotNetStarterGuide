// File: KeyMasterAuthService.cs
// Purpose: Handles communication with the KeyMaster backend authentication API.

using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json; // Used for JSON serialization/deserialization
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace YourWorkspaceName // Replace with your actual namespace
{
    public class KeyMasterAuthService
    {
        // CRITICAL:
        private const string ApiBaseUrl = "https://keymaster-agni.vercel.app/api/authenticate-key"; //DO NOT TOUCH/CHANGE IT ⚠️⚠️

        // Shared static instance of HttpClient (best practice to reuse)
        private static readonly HttpClient client = new HttpClient();

        // Configures JSON options:
        // - CamelCase for compatibility with JavaScript APIs
        // - Null fields will be omitted from request payload
        private static readonly JsonSerializerOptions jsonSerializerOptions = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
        };

        // Constructor sets up base request headers for all future HTTP calls
        public KeyMasterAuthService()
        {
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(
                new MediaTypeWithQualityHeaderValue("application/json"));

            // Optional: Set default timeouts, auth tokens, etc. here
        }

        /// <summary>
        /// Authenticates a license key against the KeyMaster API.
        /// </summary>
        /// <param name="request">Populated AuthRequest with UID, License Key, HWID, etc.</param>
        /// <returns>AuthResponse containing success flag and message, or null if deserialization fails</returns>
        public async Task<AuthResponse?> AuthenticateAsync(AuthRequest request)
        {
            // Validate essential fields before sending request
            if (string.IsNullOrWhiteSpace(request.MasterUserId))
            {
                return new AuthResponse
                {
                    Success = false,
                    Message = "Configuration Error: MasterUserId is missing in the .NET application.",
                    ErrorCode = "CLIENT_MISSING_MASTER_USER_ID"
                };
            }

            if (string.IsNullOrWhiteSpace(request.LicenseKey))
            {
                return new AuthResponse
                {
                    Success = false,
                    Message = "License Key cannot be empty.",
                    ErrorCode = "CLIENT_MISSING_LICENSE_KEY"
                };
            }

            // Construct request JSON
            try
            {
                string jsonRequest = JsonSerializer.Serialize(request, jsonSerializerOptions);
                var content = new StringContent(jsonRequest, Encoding.UTF8, "application/json");

                // Optional Debug Log:
                // Console.WriteLine("Sending JSON to KeyMaster: " + jsonRequest);

                // Make the HTTP POST request
                HttpResponseMessage response = await client.PostAsync(ApiBaseUrl, content);
                string responseBody = await response.Content.ReadAsStringAsync();

                // Optional Debug Log:
                // Console.WriteLine($"KeyMaster API Status: {response.StatusCode}, Body: {responseBody}");

                if (response.IsSuccessStatusCode)
                {
                    // Try to parse the successful response into AuthResponse
                    return JsonSerializer.Deserialize<AuthResponse>(
                        responseBody,
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                    );
                }
                else
                {
                    // Attempt to deserialize any error message returned from KeyMaster
                    try
                    {
                        var errorResponse = JsonSerializer.Deserialize<AuthResponse>(
                            responseBody,
                            new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                        if (errorResponse != null && !string.IsNullOrWhiteSpace(errorResponse.Message))
                        {
                            return errorResponse;
                        }
                    }
                    catch
                    {
                        // Swallow parse error silently; fallback below
                    }

                    // Generic error message fallback
                    return new AuthResponse
                    {
                        Success = false,
                        Message = $"Error communicating with KeyMaster: {(int)response.StatusCode} - {response.ReasonPhrase}. Details: {responseBody}",
                        ErrorCode = $"HTTP_{(int)response.StatusCode}"
                    };
                }
            }
            catch (HttpRequestException e)
            {
                // Network/connection issues
                return new AuthResponse
                {
                    Success = false,
                    Message = "Network error: Could not connect to KeyMaster. " + e.Message,
                    ErrorCode = "NETWORK_ERROR"
                };
            }
            catch (JsonException e)
            {
                // Serialization/deserialization error
                return new AuthResponse
                {
                    Success = false,
                    Message = "Error processing KeyMaster server response: " + e.Message,
                    ErrorCode = "JSON_PARSE_ERROR"
                };
            }
            catch (Exception e)
            {
                // Catch-all for unexpected issues
                return new AuthResponse
                {
                    Success = false,
                    Message = "An unexpected error occurred in KeyMasterAuthService: " + e.Message,
                    ErrorCode = "UNEXPECTED_CLIENT_ERROR"
                };
            }
        }
    }
}
