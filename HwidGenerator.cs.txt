using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace YourWorkspaceName // Replace with your actual namespace 

    public static class HwidGenerator
    {
        // Stores the cached HWID after it has been generated or read from file
        private static string? _hwid = null;

        // IMPORTANT:
        // Replace "TestApplication" with the actual name of your .NET application.
        // This path is where the HWID will be saved persistently between sessions.
        private static readonly string HwidFilePath = Path.Combine(
            Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
            "TestApplication", // <-- CHANGE THIS to your actual app folder name
            "hwid.dat"         // The file that stores the HWID
        );

        /// <summary>
        /// Returns a persistent hardware ID (HWID) unique to this machine and user profile.
        /// If one doesn't exist, it generates and stores a new one.
        /// </summary>
        /// <returns>Uppercase string representing the HWID</returns>
        public static string GetHardwareId()
        {
            // Return cached HWID if already read/generated earlier in the session
            if (_hwid != null) return _hwid;

            try
            {
                // Ensure the directory exists before trying to read/write the file
                string? directoryPath = Path.GetDirectoryName(HwidFilePath);
                if (directoryPath != null)
                {
                    Directory.CreateDirectory(directoryPath);
                }

                // If HWID file already exists, read from it
                if (File.Exists(HwidFilePath))
                {
                    _hwid = File.ReadAllText(HwidFilePath);

                    // If the read value is valid, return it
                    if (!string.IsNullOrWhiteSpace(_hwid))
                    {
                        return _hwid;
                    }
                }
            }
            catch (Exception ex)
            {
                // Handle file reading issues (e.g., permission denied)
                Console.WriteLine($"Error reading HWID file: {ex.Message}");
            }

            // If HWID file is missing, empty, or failed to read â€” generate a new HWID
            _hwid = Guid.NewGuid().ToString().ToUpper(); // You can later replace with custom logic if needed

            try
            {
                // Save the newly generated HWID to file for persistence
                File.WriteAllText(HwidFilePath, _hwid);
            }
            catch (Exception ex)
            {
                // Handle file writing issues
                Console.WriteLine($"Error writing HWID file: {ex.Message}");
            }

            // Return the generated HWID
            return _hwid;
        }
    }
}
